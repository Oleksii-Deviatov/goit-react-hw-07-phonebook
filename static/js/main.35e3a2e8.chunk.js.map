{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-operations.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/Spinner/Spinner.jsx","App.jsx","index.js","components/Contact/styles.module.css","components/Spinner/styles.module.css"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactsRequest","addContactsSuccess","addContactError","delContactsRequest","delContactsSuccess","delContactsError","changeFilter","contacts","createReducer","actions","_","payload","state","filter","id","loading","error","combineReducers","middleware","getDefaultMiddleware","store","configureStore","reducer","contactsReducer","devTools","process","getFilter","getAllContacts","getLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","axios","defaults","baseURL","connect","dispatch","addContact","data","value","post","then","catch","useState","inputName","setInputName","inputNumber","setInputNumber","onSubmit","e","preventDefault","find","alert","number","autoComplete","Box","display","flexDirection","TextField","label","onChange","target","margin","Button","variant","type","color","delContact","delete","operations","ListItem","disableGutters","Card","className","styles","card","CardActionArea","CardContent","justifyContent","IconButton","component","onClick","List","map","Spinner","loader","height","width","fetchContacts","a","get","useEffect","Container","maxWidth","Typography","align","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.35e3a2e8.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nconst fetchContactsRequest = createAction('contacts/fetchRequest');\nconst fetchContactsSuccess = createAction('contacts/fetchSuccess');\nconst fetchContactsError = createAction('contacts/fetchError');\n\nconst addContactsRequest = createAction('contacts/addRequest');\nconst addContactsSuccess = createAction('contacts/addSuccess');\nconst addContactError = createAction('contacts/addError');\n\nconst delContactsRequest = createAction('contacts/delRequest');\nconst delContactsSuccess = createAction('contacts/delSuccess');\nconst delContactsError = createAction('contacts/delError');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactsRequest,\n  addContactsSuccess,\n  addContactError,\n  delContactsRequest,\n  delContactsSuccess,\n  delContactsError,\n  changeFilter,\n};\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as actions from '../../redux/contacts/contacts-actions';\n\nconst contacts = createReducer([], {\n  [actions.fetchContactsSuccess]: (_, { payload }) => payload,\n  [actions.addContactsSuccess]: (state, { payload }) => [...state, payload],\n  [actions.delContactsSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [actions.fetchContactsRequest]: () => true,\n  [actions.fetchContactsSuccess]: () => false,\n  [actions.fetchContactsError]: () => false,\n  [actions.addContactsRequest]: () => true,\n  [actions.addContactsSuccess]: () => false,\n  [actions.addContactError]: () => false,\n  [actions.delContactsRequest]: () => true,\n  [actions.delContactsSuccess]: () => false,\n  [actions.delContactsError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {});\n\nexport default combineReducers({\n  contacts,\n  loading,\n  filter,\n  error,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [...getDefaultMiddleware()];\n\nconst store = configureStore({\n  reducer: contactsReducer,\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport { store };\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getFilter = state => state.filter;\n\nconst getAllContacts = state => state.contacts;\n\nconst getLoading = state => state.loading;\n\nconst getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport { getFilter, getVisibleContacts, getAllContacts, getLoading };\n","import axios from 'axios';\nimport * as actions from './contacts-actions';\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(actions.fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(actions.fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(actions.fetchContactsError(error));\n  }\n};\n\nconst addContact = value => dispatch => {\n  dispatch(actions.addContactsRequest());\n\n  axios\n    .post('/contacts', value)\n    .then(({ data }) => dispatch(actions.addContactsSuccess(data)))\n    .catch(error => dispatch(actions.addContactError(error)));\n};\n\nconst delContact = id => dispatch => {\n  dispatch(actions.delContactsRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(actions.delContactsSuccess(id)))\n    .catch(error => dispatch(actions.delContactsError(error)));\n};\n\nexport { fetchContacts, addContact, delContact };\n","import React, { useState } from 'react';\nimport { TextField, Button, Box } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { getAllContacts } from '../../redux/contacts/contacts-selectors';\nimport * as operations from '../../redux/contacts/contacts-operations';\n\nfunction ContactForm({ contacts, addContact }) {\n  const [inputName, setInputName] = useState('');\n  const [inputNumber, setInputNumber] = useState('');\n\n  function inputNameHandler({ target: { value } }) {\n    setInputName(value);\n  }\n\n  function inputNumberHendler({ target: { value } }) {\n    setInputNumber(value);\n  }\n\n  function clrForm() {\n    setInputName('');\n    setInputNumber('');\n  }\n\n  function submitHendler(e) {\n    e.preventDefault();\n\n    function checkExistContact() {\n      return !!contacts.find(\n        ({ name }) => name.toLowerCase() === inputName.toLowerCase(),\n      );\n    }\n\n    switch (true) {\n      case inputName === '':\n        return;\n\n      case checkExistContact():\n        alert(`${inputName} already exist`);\n        return;\n\n      default:\n        addContact({ name: inputName, number: inputNumber });\n        clrForm();\n        break;\n    }\n  }\n\n  return (\n    <form onSubmit={submitHendler} autoComplete=\"off\">\n      <Box display=\"flex\" flexDirection=\"column\">\n        <TextField\n          id=\"standard-basic\"\n          label=\"Name\"\n          value={inputName}\n          onChange={inputNameHandler}\n          margin=\"dense\"\n        />\n        <TextField\n          id=\"standard-basic\"\n          label=\"Number\"\n          value={inputNumber}\n          onChange={inputNumberHendler}\n          margin=\"dense\"\n        />\n        <Button variant=\"outlined\" type=\"submit\" color=\"primary\">\n          add contact\n        </Button>\n      </Box>\n    </form>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getAllContacts(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addContact: data => dispatch(operations.addContact(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport { TextField, Box } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux/contacts/contacts-actions';\n\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nfunction Filter({ onChange, value }) {\n  function inputFilterHendler({ target: { value } }) {\n    onChange(value);\n  }\n\n  return (\n    <form autoComplete=\"off\">\n      <Box display=\"flex\" flexDirection=\"column\">\n        <TextField\n          id=\"standard-basic\"\n          label=\"find contact by name\"\n          value={value}\n          onChange={inputFilterHendler}\n          margin=\"dense\"\n        />\n      </Box>\n    </form>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    value: getFilter(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onChange: value => dispatch(actions.changeFilter(value)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from 'react';\nimport {\n  Card,\n  CardContent,\n  IconButton,\n  Box,\n  CardActionArea,\n} from '@material-ui/core';\nimport DeleteForeverTwoToneIcon from '@material-ui/icons/DeleteForeverTwoTone';\nimport { connect } from 'react-redux';\nimport styles from './styles.module.css';\nimport ListItem from '@material-ui/core/ListItem';\nimport * as operations from '../../redux/contacts/contacts-operations';\n\nfunction Conact({ id, name, number, delContact }) {\n  return (\n    <ListItem disableGutters={true}>\n      <Card variant=\"outlined\" className={styles.card}>\n        <CardActionArea>\n          <CardContent>\n            <Box display=\"flex\" justifyContent=\"space-between\">\n              <p>\n                {name}: {number}\n              </p>\n              <IconButton\n                color=\"primary\"\n                component=\"span\"\n                onClick={() => delContact(id)}\n              >\n                <DeleteForeverTwoToneIcon />\n              </IconButton>\n            </Box>\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </ListItem>\n  );\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    delContact: id => dispatch(operations.delContact(id)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Conact);\n","import Conact from '../Contact';\nimport { List } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\nfunction ContactList({ contacts }) {\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => {\n        return <Conact key={id} id={id} name={name} number={number} />;\n      })}\n    </List>\n  );\n}\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nexport default connect(mapStateToProps)(ContactList);\n","import Loader from 'react-loader-spinner';\nimport styles from './styles.module.css';\n\nfunction Spinner() {\n  return (\n    <Loader\n      className={styles.loader}\n      type=\"Puff\"\n      color=\"#00BFFF\"\n      height={100}\n      width={100}\n    />\n  );\n}\n\nexport default Spinner;\n","import ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport { Container, Typography } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport * as operations from './redux/contacts/contacts-operations';\nimport { useEffect } from 'react';\nimport { getLoading } from './redux/contacts/contacts-selectors';\nimport Spinner from './components/Spinner';\n\nfunction App({ fetchContacts, getLoading }) {\n  useEffect(() => {\n    fetchContacts();\n  }, []);\n\n  return (\n    <>\n      <Container maxWidth=\"xs\">\n        <Typography variant=\"h2\" align=\"center\">\n          Phonebook\n        </Typography>\n\n        {getLoading && <Spinner />}\n\n        <ContactForm />\n\n        <Typography variant=\"h4\" align=\"center\">\n          Contacts\n        </Typography>\n\n        <Filter />\n\n        <ContactList />\n      </Container>\n    </>\n  );\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchContacts: () => dispatch(operations.fetchContacts()),\n  };\n};\n\nconst mapStateToProps = state => ({\n  getLoading: getLoading(state),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"styles_card__2pija\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"styles_loader__1_7qY\"};"],"sourceRoot":""}